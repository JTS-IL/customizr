// box-sizing
@mixin box-sizing( $what ) {
  -webkit-box-sizing: $what;
  -moz-box-sizing: $what;
  box-sizing: $what;
}

// example pxtoem(14, 16);
@function pxtoem($target, $context){
  @return ($target/$context)+0em;
}
// Convert em to px
@function emtopx($target, $context){
  @return ($target*$context)+0px;
}

@mixin opacity ($value) {
  $IEValue: $value*100;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
  filter: alpha(opacity=$IEValue);
  -moz-opacity: $value;
  -khtml-opacity: $value;
  opacity: $value;
}


@mixin filter ($bgColor, $color, $bgOpacity) {
  color: $color;
  &::before {
    content: '';
    left: 0;
    right: 0;
    bottom: 0;
    top: 0;
    position: absolute;
    background: rgba($bgColor, $bgOpacity);
  }
}

@mixin border($color, $strokeWidth, $sides ) {
  @if ( $sides == '' ) {
    border: $color $strokeWidth solid;
  }
  @else {
    @each $side in $sides {
               @if ($side == 'top' or
                    $side == 'right' or
                    $side == 'bottom' or
                    $side == 'left') {

                    border-#{$side}: $color $strokeWidth solid;
                }
            }
        }

}

@mixin bg-gradient-t2b($start-colour, $end-colour) {
    background-color: $start-colour;
    background-image: -webkit-gradient(linear, left top, left bottom, from($start-colour), to($end-colour));
    background-image: -webkit-linear-gradient(top, $start-colour, $end-colour);
    background-image:    -moz-linear-gradient(top, $start-colour, $end-colour);
    background-image:     -ms-linear-gradient(top, $start-colour, $end-colour);
    background-image:      -o-linear-gradient(top, $start-colour, $end-colour);
    background-image:         linear-gradient(top, $start-colour, $end-colour);
    filter:            progid:DXImageTransform.Microsoft.gradient(start-colourStr='#{$start-colour}', end-colourStr='#{$end-colour}');
}

@mixin bg-gradient-t2b_fade($start-colour, $end-colour) {
    background: -moz-linear-gradient(top, rgba($start-colour, 0) 0%, rgba($end-colour, 1) 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba($start-colour, 0)), color-stop(100%,rgba($end-colour, 1))); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top, rgba($start-colour, 0) 0%, rgba($end-colour, 1) 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top, rgba($start-colour, 0) 0%, rgba($end-colour, 1) 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top, rgba($start-colour, 0) 0%, rgba($end-colour, 1) 100%); /* IE10+ */
    background: linear-gradient(to bottom, rgba($start-colour, 0) 0%, rgba($end-colour, 1) 100%); /* W3C */
}

@mixin border-top-radius($radius) {
   border-top-right-radius: $radius;
   border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
  border-bottom-right-radius: $radius;
     border-top-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
   border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
  border-bottom-left-radius: $radius;
     border-top-left-radius: $radius;
}

@mixin border-radius($top, $left, $bottom, $right) {
    border-top-left-radius: $top;
    border-top-right-radius: $left;
    border-bottom-right-radius:$bottom;
    border-bottom-left-radius:$right;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false, $spread_radius: false ) {
  $params : $top $left $blur;

  @if $spread_radius {
    $params : $params $spread_radius;
  }
  @if $inset {
    $params : inset $params;
  }

  $params : $params $color;

  -webkit-box-shadow: $params;
  -moz-box-shadow: $params;
  box-shadow: $params;

}

@mixin backface-visibility ($arguments) {
  -webkit-backface-visibility: $arguments;
     -moz-backface-visibility: $arguments;
      -ms-backface-visibility: $arguments;
       -o-backface-visibility: $arguments;
          backface-visibility: $arguments;
}


//reset box model mixin
@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
    box-sizing: $box-model;
}

//clearfix mixin
@mixin clearfix() {
  *zoom:1;

  &:before,
  &:after {
      content:"";
      display:table;
  }

  &:after {
      clear:both;
  }
}


// Use this to hide from both screenreaders and browsers: h5bp.com/u
// Mostly used to eliminate elements when scaling down in media queries
@mixin hidden() {
    display: none !important;
    visibility: hidden;
}

//vendor transitions mixins
// Usage:   @include transition(width, height 0.3s ease-in-out);
@mixin transition($transitions...) {
  $unfoldedTransitions: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
  }

  -webkit-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
}

@function unfoldTransition ($transition) {
  // Default values
  $property: all;
  $duration: .2s;
  $easing: null; // Browser default is ease, which is what we want
  $delay: null; // Browser default is 0, which is what we want
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i)
    } @else {
      $p: nth($defaultProperties, $i)
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}

@mixin transform ($transforms) {
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  transform: $transforms;
}

@mixin czr__responsive-wrapper( $width, $height ) {
  &::before {
    padding-top: percentage( $height / $width );
  }
}

/* Taken from bootstrap */
// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-up($lower, $breakpoints) {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-between($name, $name, $breakpoints) {
    @content;
  }
}

// Rows CSS based
// This will be not needed anymore with the flex :D
@mixin make-grid-smart-rows( $items: $grid-columns, $offset : 0, $breakpoints: $grid-breakpoints ) {
  @each $breakpoint in map-keys($breakpoints) {

    $infix    : breakpoint-infix($breakpoint, $breakpoints);
    $suffix   : if($offset == 0, "", "-#{$offset}");
    $n_offset : if($offset == 0, "1", "#{$offset+1}");

    //case sticky expanded
    @include media-breakpoint-only($breakpoint, $breakpoints) {

      @for $i from 1 through $items {
        $nth_child : $grid-columns/$i;
        @if ( round($nth-child) == $nth_child ) {
          .czr-smart-row#{$suffix} .col#{$infix}-#{$i}:nth-child(#{$nth-child}n+#{$n_offset}) {
            clear: left; //will be right for RTL
          }
        }
      }
    }
  }
}